" Load pathogen plugins and set runtime if runtime hook exists
execute pathogen#infect()

if filereadable($HOME . "/.vimruntimehook")
    source ~/.vimruntimehook
endif

"Base settings
  set autoindent            " always set autoindenting on
  set backspace=2           " allow backspacing over everything in insert mode
  set cindent               " c code indenting
  set diffopt=filler,iwhite " keep files synced and ignore whitespace
  set expandtab             " Get rid of tabs altogether and replace with spaces
  set foldcolumn=2          " set a column incase we need it
  set foldlevel=0           " show contents of all folds
  set foldmethod=indent     " use indent unless overridden
  set guioptions-=m         " Remove menu from the gui
  set guioptions-=T         " Remove toolbar
  set hidden                " hide buffers instead of closing
  set history=50            " keep 50 lines of command line history
  set hlsearch
  set ignorecase            " Do case insensitive matching
  set incsearch             " Incremental search
  set laststatus=2          " always have status bar
  set linebreak             " This displays long lines as wrapped at word boundries
  set matchtime=10          " Time to flash the brack with showmatch
  set mousehide
  set nobackup              " Don't keep a backup file
  set nocompatible          " Use Vim defaults (much better!)
  set nofen                 " disable folds
  set noswapfile            " this guy is really annoyoing sometimes
  set number
  set notimeout             " i like to be pokey
  set tabstop=4
  set ttimeout              " timeout on key-codes
  set ttimeoutlen=100       " timeout on key-codes after 100ms
  set ruler                 " the ruler on the bottom is useful
  set scrolloff=1           " dont let the curser get too close to the edge
  set shiftwidth=4          " Set indention level to be the same as softtabstop
  set showcmd               " Show (partial) command in status line.
  set showmatch             " Show matching brackets.
  set smartcase
  set smartindent
  set softtabstop=4         " Why are tabs so big?  This fixes it
  set t_Co=256
  set textwidth=0           " Don't wrap words by default
  set virtualedit=block     " let blocks be in virutal edit mode
  set wildmenu              " This is used with wildmode(full) to cycle options

"Longer Set options
  set cscopequickfix=s-,c-,d-,i-,t-,e-,g-,f-   " useful for cscope in quickfix
  set listchars=tab:>-,trail:-                 " prefix tabs with a > and trails with -
  set tags+=./.tags;/,./tags;/                 " set ctags
  set whichwrap+=<,>,[,],h,l,~                 " arrow keys can wrap in normal and insert modes
  set wildmode=list:longest,full               " list all options, match to the longest

  set helpfile=$VIMRUNTIME/doc/help.txt
  if has("gui_running")
    if has("gui_gtk2")
      set guifont=Inconsolata\ 9
    elseif has("gui_macvim")
      set guifont=Meslo\ LG\ M\ DZ\ Regular\ for\ Powerline
    elseif has("gui_win32")
      set guifont=Consolas:h11:cANSI
    endif
  endif
  set path+=.,..,../..,../../..,../../../..,/usr/include

  " Suffixes that get lower priority when doing tab completion for filenames.
  " These are files I am not likely to want to edit or read.
  set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.class

"Use a temp directory in the home dir rather than in tmp where it can get
"cleaned up without our consent
perl <<EOT
  # Get the user name, should probably get the home dir...
  my $home_dir = (getpwuid($<))[7];

  if ( -e $home_dir ) {
    my $temp_location = "$home_dir/.vim-tmp";
    my $tmp_dir = $temp_location . '/vXXX';
    my $swp_dir = $temp_location . '/swps';

    # If the location doesn't exist, create it
    mkdir $temp_location unless ( -e $temp_location );

    mkdir $tmp_dir unless ( -e $tmp_dir );
    mkdir $swp_dir unless ( -e $swp_dir );

    # Set TMPDIR and directory to the new location
    VIM::DoCommand("let \$TMPDIR = '" . $tmp_dir . "'") if ( -w $tmp_dir );
    VIM::DoCommand("set directory=" . $swp_dir) if ( -w $swp_dir );
  }
EOT

"Disabled options
  "set list                    " Make tabs and trails explicit
  "set wrapmargin=80           " When pasteing, use this, because textwidth becomes 0
                               " wrapmargin inserts breaks if you exceed its value

"Set colorscheme.  This is a black background colorscheme
  colorscheme xoria256

" viminfo options
  " read/write a .viminfo file, don't store more than
  " 50 lines of registers
  set viminfo='20,\"50


"Set variables for plugins to use
  "vimspell variables
    "don't automatically spell check!
    let spell_auto_type=""

  "taglist.vim settings
  " if exists("g:useNinjaTagList") && g:useNinjaTagList == 1
    set updatetime=1000 "interval to update list window

    let Tlist_WinWidth = 60
    let Tlist_Auto_Open=1 "Auto open the list window
    let Tlist_Compact_Format=1
    let Tlist_Ctags_Cmd="/usr/local/bin/ctags"
    let Tlist_Enable_Fold_Column=0 "Turn off the fold column for list window
    let Tlist_Exit_OnlyWindow=1 "Exit if list is only window
    let Tlist_File_Fold_Auto_Close=1
    let Tlist_Show_Menu=1 "Show tag menu in gvim
    let Tlist_Use_Right_Window = 1 "put list window on the rigth

    "maps to close, and open list window
    map <silent> <Leader>tc :TlistClose<CR>
    map <silent> <Leader>to :TlistOpen<CR>
  " endif

  if executable('ag')
    " Note we extract the column as well as the file and line number
    set grepprg=ag\ --nogroup\ --nocolor\ --column
    set grepformat=%f:%l:%c%m
  endif

  " LargeFile.vim settings
  " don't run syntax and other expensive things on files larger than NUM megs
  let g:LargeFile = 100

"Turn on filetype plugins to automagically
  "Grab commands for particular filetypes.
  "Grabbed from $VIM/ftplugin
  filetype plugin on
  filetype indent on

"Turn on syntax highlighting
syntax on

"Mappings
  "normal mode maps
    nnoremap ; :
    map <C-T> :tabnew 
    "Map \pe to editing the file in perforce
    nmap <Leader>pe :!p4 edit %<CR>
    "Map \e to edit a file from the directory of the current buffer
    if has("unix")
      nmap <Leader>e :e <C-R>=expand("%:p:h") . "/"<CR>
    else
      nmap <Leader>,e :e <C-R>=expand("%:p:h") . "\\"<CR>
    endif

  "map commands
    "re-map rcsvers funtions
    map <S-CR> O<Esc>
    map <CR> o<Esc>
    map <F5> <Leader>rlog  " Display log buffer selector
    map <F6> <Leader>older " diff with an older version of the file
    map <F7> <Leader>newer " diff with a newer version of the file
    "firefox like tab switching
    map [6^ :tabnext<CR> " Switch to the next tab
    map [5^ :tabprev<CR> " Switch to the prev tab

    nmap <silent> <leader>/ :nohlsearch<CR>
    nmap <silent> <C-n> :silent noh<CR>
    nmap <silent> <C-e> :NERDTreeToggle<CR>
    nmap <silent> <C-y> :TlistToggle<CR>
    nmap <C-Tab> :tabn<CR>
    nmap <C-S-Tab> :tabp<CR>
    nmap <Leader>r zA

    vnorem // y/<c-r>"<CR>

"Functions
fu! CscopeAdd() " Add Cscope database named .cscope.out
    let dir = getcwd()
    let savedir = getcwd()
    wh (dir != '/')
        let scopefile = dir . '/' . ".cscope.out"
        if filereadable(scopefile)
            exe "cs add " scopefile
            exe "cd " savedir
            return dir
        en
        cd ..
        let dir = getcwd()
    endw
    exe "cd " savedir
endf

autocmd FileType c,cpp,java,php,rb,pl autocmd BufWritePre <buffer> :%s/\s\+$//e

"Adding mail as a spell checked type, only if in 7.0 >
if (v:version >= 700)
  au FileType mail set spell
endif
